distro:
there are many versions of distribution of linux like ubuntu debian fedora centOS arch because it is open source

differences with other os:
windows separates path with \ while linux with /
linux is case-sensitive (Echo hello will not work)

prompt explained:
user@computername:currentdirectoryA
A is # if you are root or $ if you are some user

filesystem:
in linux everything is a file
below all the directory that are listed if you run ls at /
dev directory short devices not development contains files to interact with your devices
bin directory short for binaries
boot directory contains files related to booting
etc directory short for editable text where we have most configuration files to be edited by the user
home directory contains a subdirectory per user in the system where they can store their files
root directory is the home directory of the root user
lib directory which stores libraries
var directory short variables where files that are updated frequently are stored
proc directory short for processes where processes are stored
you can navigate the filesystem with commands like: pwd, cd, ls -hal, tree

package manager:
apt (newer version) apg-get (older)
apt install package name
apt update (updates the package database with new versions or new packages)
apt upgrade (installs new versions of packages you already have in the system)
in ubuntu software can also be installed as a snap

working with files:
touch, cp, mv, mkdir, nano, vim, > < (redirection)

more advanced commands:
grep -i hello file1.txt (searches for lines where the string hello is present in file1.txt and prints them in the terminal)
find . -name "*.txt" (searches for all file names in the current directory with .txt extension)
echo hello ; cd test ; (chains these 2 commands)
mkdir test && mkdir test && echo hello (chains these commands but exit if 1 command fails)
mkdir test || echo hello (if you don't create test directory then print hello, if the directory is created don't print)
ls /bin | more (use a pipe, in this case view the output of ls /bin in more)
echo first; \
echo second; (multiple line command)

environment variables:
printenv
printenv PATH
echo $PATH
export DB_USER=mosh (only available in the current shell)
echo $DB_USER
echo "DB_USER=mosh" >> ~/.bashrc ; source ~/.bashrc (write in shell initialisation file and source the it)

processes:
ps (list processes)
columns: PID process identifier as a number,
    TTY teletype usually as pst/0 pseudo terminal / 0 means it's the first terminal if there were 2 terminal open it would have been 1,
    CMD as the command executed by the process
kill PID (kills process with PID by sending it by default a signal that terminates it, you can send other signals)

managing users:
useradd -m john (create user john with his home directory -m option)
userdel john (delete john)
usermod -s /bin/bash (modify john login shell)
passwd john (change the password of john)
docker exec -it -u john ubuntu-playground /bin/bash (login as john in the container)
adduser (more interactive)
cat etc/passwd (view all users)
every user created is put in the group of the same name as their primary group (meaning files created by him will have that group assigned to it and the relative permissions)

managing groups:
groupadd developers
cat etc/group (view all groups)
usermod -G developers john (add john to developers group)
groups john (see the groups of john)

file permissions:
in ls you see the permission string
first character is a d or - depending on if the file is a directory or not and then 3 sets of r (read) w (write) x (execute permissions)
the first set is for the owner of the file (usually the one who created it unless chown has been used to change the owner)
the second is for the group of that file (usually the primary group of the owner unless chgrp has been used to change the owner)
the third is for other users
assuming logged in as root
touch file (owned by root and group root)
chgrp john file (now in john group)
chmod g+x file (add execution permissions for users in john group, like john and others...)



